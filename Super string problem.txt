#include <bits/stdc++.h> 
using namespace std; 

int min(int a, int b) 
{ 
	return (a < b) ? a : b; 
} 


int findOverlappingPair(string str1, string str2, string &str) 
{ 
	int max = INT_MIN; 
	int len1 = str1.length(); 
	int len2 = str2.length(); 

	for (int i = 1; i <= min(len1, len2); i++) 
	{ 
		
		if (str1.compare(len1-i, i, str2, 0, i) == 0) 
		{ 
			if (max < i) 
			{ 
				
				max = i; 
				str = str1 + str2.substr(i); 
			} 
		} 
	} 
	for (int i = 1; i <= min(len1, len2); i++) 
	{ 
		
		if (str1.compare(0, i, str2, len2-i, i) == 0) 
		{ 
			if (max < i) 
			{ 
				//update max and str 
				max = i; 
				str = str2 + str1.substr(i); 
			} 
		} 
	} 

	return max; 
} 

string findShortestSuperstring(string arr[], int len) 
{ 
	
	while(len != 1) 
	{ 
		int max = INT_MIN; // to store maximum overlap 
		int l, r; // to store array index of strings 
		
		string resStr; // to store resultant string after 
		

		for (int i = 0; i < len; i++) 
		{ 
			for (int j = i + 1; j < len; j++) 
			{ 
				string str; 

				
				int res = findOverlappingPair(arr[i], arr[j], str); 

				// check for maximum overlap 
				if (max < res) 
				{ 
					max = res; 
					resStr.assign(str); 
					l = i, r = j; 
				} 
			} 
		} 

		len--;
		if (max == INT_MIN) 
			arr[0] += arr[len]; 
		else
		{ 
			arr[l] = resStr; // copy resultant string to index l 
			arr[r] = arr[len]; // copy string at last index to index r 
		} 
	} 
	return arr[0]; 
} 


int main() 
{ 
	string arr[] = {"catgc", "ctaagt", "gcta", "ttca", "atgcatc"}; 
	int len = sizeof(arr)/sizeof(arr[0]); 

	cout << "The Shortest Superstring is "
		<< findShortestSuperstring(arr, len); 

	return 0; 
} 
